
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Oct 21 19:12:52 GFT 2018
//----------------------------------------------------

package br.com.minic.analisadorsintatico;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Oct 21 19:12:52 GFT 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\002\005\000\002\004" +
    "\002\000\002\004\003\000\002\005\003\000\002\005\004" +
    "\000\002\003\011\000\002\006\015\000\002\036\002\000" +
    "\002\036\003\000\002\007\014\000\002\016\005\000\002" +
    "\017\002\000\002\017\003\000\002\020\005\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\011\002\000\002\011\003\000\002\012\003\000" +
    "\002\012\004\000\002\013\003\000\002\013\007\000\002" +
    "\013\007\000\002\013\007\000\002\013\007\000\002\013" +
    "\006\000\002\013\012\000\002\013\007\000\002\013\006" +
    "\000\002\032\002\000\002\032\003\000\002\033\006\000" +
    "\002\034\002\000\002\034\003\000\002\035\010\000\002" +
    "\014\007\000\002\014\003\000\002\015\004\000\002\021" +
    "\005\000\002\021\006\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\024\005\000\002\024\005\000\002\024" +
    "\003\000\002\025\005\000\002\025\005\000\002\025\003" +
    "\000\002\026\005\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\006\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\030\002\000\002\030" +
    "\003\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\006\005\uffff\016\010\001\002\000\004\002" +
    "\231\001\002\000\006\005\ufffd\016\010\001\002\000\004" +
    "\005\020\001\002\000\004\005\ufffe\001\002\000\004\004" +
    "\011\001\002\000\004\010\012\001\002\000\004\007\013" +
    "\001\002\000\004\017\014\001\002\000\004\020\015\001" +
    "\002\000\004\011\016\001\002\000\006\005\ufffb\016\ufffb" +
    "\001\002\000\014\002\ufff9\005\027\021\033\022\045\023" +
    "\044\001\002\000\004\006\021\001\002\000\004\014\022" +
    "\001\002\000\004\015\023\001\002\000\004\012\024\001" +
    "\002\000\032\005\027\007\043\021\033\022\045\023\044" +
    "\024\034\025\025\026\036\027\030\030\040\031\042\052" +
    "\uffee\001\002\000\004\014\200\001\002\000\032\005\027" +
    "\007\043\021\033\022\045\023\044\024\034\025\025\026" +
    "\036\027\030\030\040\031\042\052\uffec\001\002\000\006" +
    "\007\ufff2\014\ufff2\001\002\000\004\014\173\001\002\000" +
    "\004\052\167\001\002\000\032\005\uffea\007\uffea\021\uffea" +
    "\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030" +
    "\uffea\031\uffea\052\uffea\001\002\000\006\007\ufff0\014\ufff0" +
    "\001\002\000\004\014\143\001\002\000\032\005\uffda\007" +
    "\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda" +
    "\027\uffda\030\uffda\031\uffda\052\uffda\001\002\000\030\005" +
    "\027\007\043\021\033\022\045\023\044\024\034\025\025" +
    "\026\036\027\030\030\040\031\042\001\002\000\006\007" +
    "\112\014\111\001\002\000\004\014\105\001\002\000\004" +
    "\052\uffed\001\002\000\004\014\101\001\002\000\004\032" +
    "\046\001\002\000\006\007\ufff1\014\ufff1\001\002\000\006" +
    "\007\uffef\014\uffef\001\002\000\016\007\057\014\060\045" +
    "\050\046\054\047\051\050\053\001\002\000\012\015\uffc2" +
    "\033\uffc2\041\063\042\062\001\002\000\016\015\uffc5\033" +
    "\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\001\002\000\006" +
    "\015\uffc1\033\uffc1\001\002\000\016\015\uffcb\033\uffcb\041" +
    "\uffcb\042\uffcb\043\066\044\067\001\002\000\006\015\uffc0" +
    "\033\uffc0\001\002\000\016\015\uffc4\033\uffc4\041\uffc4\042" +
    "\uffc4\043\uffc4\044\uffc4\001\002\000\004\033\100\001\002" +
    "\000\016\015\uffc8\033\uffc8\041\uffc8\042\uffc8\043\uffc8\044" +
    "\uffc8\001\002\000\020\014\073\015\uffc6\033\uffc6\041\uffc6" +
    "\042\uffc6\043\uffc6\044\uffc6\001\002\000\012\007\057\014" +
    "\060\045\050\046\054\001\002\000\010\015\064\041\063" +
    "\042\062\001\002\000\012\007\057\014\060\045\050\046" +
    "\054\001\002\000\012\007\057\014\060\045\050\046\054" +
    "\001\002\000\016\015\uffc7\033\uffc7\041\uffc7\042\uffc7\043" +
    "\uffc7\044\uffc7\001\002\000\016\015\uffcd\033\uffcd\041\uffcd" +
    "\042\uffcd\043\066\044\067\001\002\000\012\007\057\014" +
    "\060\045\050\046\054\001\002\000\012\007\057\014\060" +
    "\045\050\046\054\001\002\000\016\015\uffc9\033\uffc9\041" +
    "\uffc9\042\uffc9\043\uffc9\044\uffc9\001\002\000\016\015\uffca" +
    "\033\uffca\041\uffca\042\uffca\043\uffca\044\uffca\001\002\000" +
    "\016\015\uffcc\033\uffcc\041\uffcc\042\uffcc\043\066\044\067" +
    "\001\002\000\020\007\057\014\060\015\uffbf\045\050\046" +
    "\054\047\051\050\053\001\002\000\004\015\uffbe\001\002" +
    "\000\004\015\077\001\002\000\004\015\uffbd\001\002\000" +
    "\016\015\uffc3\033\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3" +
    "\001\002\000\032\005\uffe2\007\uffe2\021\uffe2\022\uffe2\023" +
    "\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2" +
    "\052\uffe2\001\002\000\016\007\057\014\060\045\050\046" +
    "\054\047\051\050\053\001\002\000\004\015\103\001\002" +
    "\000\004\033\104\001\002\000\032\005\uffe6\007\uffe6\021" +
    "\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6" +
    "\030\uffe6\031\uffe6\052\uffe6\001\002\000\016\007\057\014" +
    "\060\045\050\046\054\047\051\050\053\001\002\000\004" +
    "\015\107\001\002\000\004\033\110\001\002\000\032\005" +
    "\uffe7\007\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7" +
    "\026\uffe7\027\uffe7\030\uffe7\031\uffe7\052\uffe7\001\002\000" +
    "\004\007\125\001\002\000\010\014\114\032\115\033\uffe1" +
    "\001\002\000\004\033\124\001\002\000\004\051\121\001" +
    "\002\000\016\007\057\014\060\045\050\046\054\047\051" +
    "\050\053\001\002\000\004\033\uffe0\001\002\000\004\033" +
    "\120\001\002\000\032\005\uffe3\007\uffe3\021\uffe3\022\uffe3" +
    "\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031" +
    "\uffe3\052\uffe3\001\002\000\004\007\122\001\002\000\004" +
    "\015\123\001\002\000\004\033\uffdf\001\002\000\032\005" +
    "\uffe5\007\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5" +
    "\026\uffe5\027\uffe5\030\uffe5\031\uffe5\052\uffe5\001\002\000" +
    "\004\032\126\001\002\000\016\007\057\014\060\045\050" +
    "\046\054\047\051\050\053\001\002\000\004\015\130\001" +
    "\002\000\006\014\131\033\uffde\001\002\000\004\051\135" +
    "\001\002\000\004\033\134\001\002\000\004\033\uffdd\001" +
    "\002\000\032\005\uffe4\007\uffe4\021\uffe4\022\uffe4\023\uffe4" +
    "\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\052" +
    "\uffe4\001\002\000\004\007\136\001\002\000\004\032\137" +
    "\001\002\000\016\007\057\014\060\045\050\046\054\047" +
    "\051\050\053\001\002\000\004\015\141\001\002\000\004" +
    "\033\uffdc\001\002\000\032\005\uffd9\007\uffd9\021\uffd9\022" +
    "\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9" +
    "\031\uffd9\052\uffd9\001\002\000\012\007\147\034\144\045" +
    "\151\046\150\001\002\000\004\014\164\001\002\000\016" +
    "\010\160\011\157\035\154\036\155\037\162\040\161\001" +
    "\002\000\004\015\152\001\002\000\020\010\uffd6\011\uffd6" +
    "\015\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\001\002\000" +
    "\020\010\uffd4\011\uffd4\015\uffd4\035\uffd4\036\uffd4\037\uffd4" +
    "\040\uffd4\001\002\000\020\010\uffd5\011\uffd5\015\uffd5\035" +
    "\uffd5\036\uffd5\037\uffd5\040\uffd5\001\002\000\030\005\027" +
    "\007\043\021\033\022\045\023\044\024\034\025\025\026" +
    "\036\027\030\030\040\031\042\001\002\000\032\005\uffdb" +
    "\007\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\027\uffdb\030\uffdb\031\uffdb\052\uffdb\001\002\000\010" +
    "\007\uffce\045\uffce\046\uffce\001\002\000\010\007\uffd1\045" +
    "\uffd1\046\uffd1\001\002\000\010\007\147\045\151\046\150" +
    "\001\002\000\010\007\uffd3\045\uffd3\046\uffd3\001\002\000" +
    "\010\007\uffd2\045\uffd2\046\uffd2\001\002\000\010\007\uffcf" +
    "\045\uffcf\046\uffcf\001\002\000\010\007\uffd0\045\uffd0\046" +
    "\uffd0\001\002\000\004\015\uffd8\001\002\000\012\007\147" +
    "\034\144\045\151\046\150\001\002\000\004\015\166\001" +
    "\002\000\004\015\uffd7\001\002\000\004\045\170\001\002" +
    "\000\004\033\171\001\002\000\004\013\172\001\002\000" +
    "\014\002\ufff7\005\ufff7\021\ufff7\022\ufff7\023\ufff7\001\002" +
    "\000\016\007\057\014\060\045\050\046\054\047\051\050" +
    "\053\001\002\000\004\015\175\001\002\000\004\033\176" +
    "\001\002\000\032\005\uffe8\007\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8" +
    "\052\uffe8\001\002\000\004\052\uffeb\001\002\000\012\007" +
    "\147\034\144\045\151\046\150\001\002\000\004\015\202" +
    "\001\002\000\030\005\027\007\043\021\033\022\045\023" +
    "\044\024\034\025\025\026\036\027\030\030\040\031\042" +
    "\001\002\000\032\005\uffe9\007\uffe9\021\uffe9\022\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9" +
    "\052\uffe9\001\002\000\004\002\ufff8\001\002\000\004\002" +
    "\000\001\002\000\004\007\207\001\002\000\004\014\210" +
    "\001\002\000\012\005\027\021\033\022\045\023\044\001" +
    "\002\000\004\007\222\001\002\000\004\015\213\001\002" +
    "\000\004\012\214\001\002\000\032\005\027\007\043\021" +
    "\033\022\045\023\044\024\034\025\025\026\036\027\030" +
    "\030\040\031\042\052\uffee\001\002\000\004\052\216\001" +
    "\002\000\016\007\057\014\060\045\050\046\054\047\051" +
    "\050\053\001\002\000\004\033\220\001\002\000\004\013" +
    "\221\001\002\000\004\002\ufffa\001\002\000\006\015\ufff5" +
    "\051\225\001\002\000\004\015\ufff6\001\002\000\004\015" +
    "\ufff4\001\002\000\012\005\027\021\033\022\045\023\044" +
    "\001\002\000\004\007\227\001\002\000\004\015\ufff3\001" +
    "\002\000\004\005\ufffc\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\012\002\003\003\004\004\005\005\006\001" +
    "\001\000\002\001\001\000\006\003\004\005\227\001\001" +
    "\000\004\007\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\203\010\205\036\204\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\010\036\011\030\012\040\013\025\014\031\015\034" +
    "\001\001\000\002\001\001\000\014\010\036\012\176\013" +
    "\025\014\031\015\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\036" +
    "\013\141\014\031\015\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\024" +
    "\046\025\051\026\055\027\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\024\060\025\051\026" +
    "\055\001\001\000\002\001\001\000\006\025\071\026\055" +
    "\001\001\000\006\025\064\026\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\070\001\001\000\004" +
    "\026\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\024\046\025\051\026\055\027\075" +
    "\030\074\031\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\024\046\025\051\026\055\027\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\024\046\025\051\026\055\027\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\032\112\033\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\024\046\025\051\026\055\027\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\024\046\025" +
    "\051\026\055\027\126\001\001\000\002\001\001\000\006" +
    "\034\131\035\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\024\046\025\051\026\055\027" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\145\022\144\001\001\000\002\001" +
    "\001\000\004\023\155\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\010" +
    "\036\013\152\014\031\015\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\164\022" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\024\046\025\051\026\055\027\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\200\022\144\001\001\000\002" +
    "\001\001\000\012\010\036\013\202\014\031\015\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\210\016" +
    "\211\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\010\036\011\214\012\040\013\025\014" +
    "\031\015\034\001\001\000\002\001\001\000\012\024\046" +
    "\025\051\026\055\027\216\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\222\020\223" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\225\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ParametrosOPT ::= Expressao_EXP 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParametrosOPT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ParametrosP ::= ParametrosOPT 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParametrosP",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ParametrosP ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParametrosP",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expressao_EXP ::= LITERAL_STRING 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expressao_EXP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expressao_EXP ::= LITERAL_CHAR 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expressao_EXP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expressao_EXP ::= ExpAritmetica 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expressao_EXP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // F ::= IDENTIFICADOR ABRE_PARENTESES ParametrosP FECHA_PARENTESES 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // F ::= LITERAL_PONTO_FLUTUANTE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // F ::= LITERAL_INTEIRO 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // F ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // F ::= ABRE_PARENTESES ExpAritmetica FECHA_PARENTESES 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // T ::= F 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // T ::= T DIVIDE F 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // T ::= T VEZES F 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ExpAritmetica ::= T 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpAritmetica",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ExpAritmetica ::= ExpAritmetica MENOS T 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpAritmetica",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ExpAritmetica ::= ExpAritmetica SOMA T 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpAritmetica",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OpRelacional ::= DIFERENTE_IGUAL 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpRelacional",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OpRelacional ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpRelacional",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OpRelacional ::= MAIOR_IGUAL 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpRelacional",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OpRelacional ::= IGUAL_IGUAL 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpRelacional",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OpRelacional ::= MENOR 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpRelacional",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OpRelacional ::= MAIOR 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpRelacional",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // RelAux ::= LITERAL_PONTO_FLUTUANTE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelAux",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RelAux ::= LITERAL_INTEIRO 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelAux",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // RelAux ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelAux",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ExpRel ::= EXCLAMA ABRE_PARENTESES ExpRel FECHA_PARENTESES 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpRel",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ExpRel ::= RelAux OpRelacional RelAux 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpRel",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CMDELSE ::= ELSE DeclComando 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CMDELSE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CMDIF ::= CMDELSE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CMDIF",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CMDIF ::= IF ABRE_PARENTESES ExpRel FECHA_PARENTESES DeclComando 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CMDIF",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ExpComand ::= ABRE_PARENTESES VIRGULA IDENTIFICADOR IGUAL Expressao_EXP FECHA_PARENTESES 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpComand",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ExpRepet ::= ExpComand 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpRepet",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ExpRepet ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpRepet",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IdComand ::= ABRE_PARENTESES VIRGULA IDENTIFICADOR FECHA_PARENTESES 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdComand",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IdRepet ::= IdComand 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdRepet",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IdRepet ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdRepet",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DeclComando ::= IDENTIFICADOR IGUAL Expressao_EXP PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclComando",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DeclComando ::= DeclTipo IDENTIFICADOR IGUAL Expressao_EXP PONTO_VIRGULA 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclComando",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DeclComando ::= DeclTipo ABRE_PARENTESES IDENTIFICADOR IGUAL Expressao_EXP FECHA_PARENTESES ExpRepet PONTO_VIRGULA 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclComando",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DeclComando ::= DeclTipo IDENTIFICADOR IdRepet PONTO_VIRGULA 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclComando",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DeclComando ::= PRINTSTR ABRE_PARENTESES Expressao_EXP FECHA_PARENTESES PONTO_VIRGULA 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclComando",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DeclComando ::= PRINTINT ABRE_PARENTESES Expressao_EXP FECHA_PARENTESES PONTO_VIRGULA 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclComando",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DeclComando ::= PRINTF ABRE_PARENTESES Expressao_EXP FECHA_PARENTESES PONTO_VIRGULA 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclComando",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DeclComando ::= WHILE ABRE_PARENTESES ExpRel FECHA_PARENTESES DeclComando 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclComando",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DeclComando ::= CMDIF 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclComando",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DeclComandos ::= DeclComando DeclComandos 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclComandos",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DeclComandos ::= DeclComando 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclComandos",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ComandoOPT ::= DeclComandos 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComandoOPT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ComandoOPT ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComandoOPT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DeclTipo ::= CHAR 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclTipo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DeclTipo ::= DOUBLE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclTipo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DeclTipo ::= FLOAT 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclTipo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DeclTipo ::= INT 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclTipo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OpRest ::= VIRGULA DeclTipo IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpRest",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // RestoListaArgumentos ::= OpRest 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RestoListaArgumentos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // RestoListaArgumentos ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RestoListaArgumentos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ListaArgumentos ::= DeclTipo IDENTIFICADOR RestoListaArgumentos 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaArgumentos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Funcao_Main ::= INT MAIN ABRE_PARENTESES FECHA_PARENTESES ABRE_CHAVE ComandoOPT RETORNO LITERAL_INTEIRO PONTO_VIRGULA FECHA_CHAVE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Funcao_Main",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // OpFunc ::= DeclFuncoes 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpFunc",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OpFunc ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpFunc",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclFuncoes ::= DeclTipo IDENTIFICADOR ABRE_PARENTESES ListaArgumentos FECHA_PARENTESES ABRE_CHAVE ComandoOPT RETORNO Expressao_EXP PONTO_VIRGULA FECHA_CHAVE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclFuncoes",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DeclInclude ::= JOGO_DA_VELHA INCLUDE MENOR IDENTIFICADOR PONTO LETRA_H MAIOR 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclInclude",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DeclIncludeList ::= DeclInclude DeclIncludeList 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclIncludeList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclIncludeList ::= DeclInclude 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclIncludeList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclIncludeOpt ::= DeclIncludeList 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclIncludeOpt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DeclIncludeOpt ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclIncludeOpt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ProgramaMiniC ::= DeclIncludeOpt Funcao_Main OpFunc 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProgramaMiniC",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ProgramaMiniC EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

